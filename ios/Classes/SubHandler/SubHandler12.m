//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler12.h"
#import "FluttifyMessageCodec.h"
#import <AMapSearchKit/AMapSearchKit.h>
#import "AMapNearbySearchManagerDelegate_Anonymous.h"
#import "AMapSearchDelegate_Anonymous.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler12)
- (NSDictionary<NSString*, Handler>*) getSubHandler12 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"ObjectFactory::create_batchAMapWeatherSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapWeatherSearchResponse* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapWeatherSearchResponse alloc] init];
                } else {
                    __this__ = [AMapWeatherSearchResponse alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNearbySearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNearbySearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNearbySearchRequest alloc] init];
                } else {
                    __this__ = [AMapNearbySearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNearbySearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNearbySearchResponse* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNearbySearchResponse alloc] init];
                } else {
                    __this__ = [AMapNearbySearchResponse alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudSearchBaseRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudSearchBaseRequest alloc] init];
                } else {
                    __this__ = [AMapCloudSearchBaseRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOIAroundSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOIAroundSearchRequest alloc] init];
                } else {
                    __this__ = [AMapCloudPOIAroundSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOIPolygonSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOIPolygonSearchRequest alloc] init];
                } else {
                    __this__ = [AMapCloudPOIPolygonSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOIIDSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOIIDSearchRequest alloc] init];
                } else {
                    __this__ = [AMapCloudPOIIDSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOILocalSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOILocalSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOILocalSearchRequest alloc] init];
                } else {
                    __this__ = [AMapCloudPOILocalSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOISearchResponse* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOISearchResponse alloc] init];
                } else {
                    __this__ = [AMapCloudPOISearchResponse alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapShareSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapShareSearchBaseRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapShareSearchBaseRequest alloc] init];
                } else {
                    __this__ = [AMapShareSearchBaseRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapLocationShareSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapLocationShareSearchRequest alloc] init];
                } else {
                    __this__ = [AMapLocationShareSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPOIShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapPOIShareSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapPOIShareSearchRequest alloc] init];
                } else {
                    __this__ = [AMapPOIShareSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRouteShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRouteShareSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRouteShareSearchRequest alloc] init];
                } else {
                    __this__ = [AMapRouteShareSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNavigationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNavigationShareSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNavigationShareSearchRequest alloc] init];
                } else {
                    __this__ = [AMapNavigationShareSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapShareSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapShareSearchResponse* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapShareSearchResponse alloc] init];
                } else {
                    __this__ = [AMapShareSearchResponse alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapFutureRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapFutureRouteSearchRequest* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapFutureRouteSearchRequest alloc] init];
                } else {
                    __this__ = [AMapFutureRouteSearchRequest alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapFutureRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapFutureRouteSearchResponse* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapFutureRouteSearchResponse alloc] init];
                } else {
                    __this__ = [AMapFutureRouteSearchResponse alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSearchObject": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSearchObject* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSearchObject alloc] init];
                } else {
                    __this__ = [AMapSearchObject alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapGeoPoint* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapGeoPoint alloc] init];
                } else {
                    __this__ = [AMapGeoPoint alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapGeoPolygon* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapGeoPolygon alloc] init];
                } else {
                    __this__ = [AMapGeoPolygon alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCity* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCity alloc] init];
                } else {
                    __this__ = [AMapCity alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSuggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSuggestion* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSuggestion alloc] init];
                } else {
                    __this__ = [AMapSuggestion alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTip": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTip* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTip alloc] init];
                } else {
                    __this__ = [AMapTip alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapImage* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapImage alloc] init];
                } else {
                    __this__ = [AMapImage alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPOIExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapPOIExtension* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapPOIExtension alloc] init];
                } else {
                    __this__ = [AMapPOIExtension alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapIndoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapIndoorData* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapIndoorData alloc] init];
                } else {
                    __this__ = [AMapIndoorData alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSubPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSubPOI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSubPOI alloc] init];
                } else {
                    __this__ = [AMapSubPOI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRoutePOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRoutePOI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRoutePOI alloc] init];
                } else {
                    __this__ = [AMapRoutePOI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapPOI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapPOI alloc] init];
                } else {
                    __this__ = [AMapPOI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapAOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapAOI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapAOI alloc] init];
                } else {
                    __this__ = [AMapAOI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRoad* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRoad alloc] init];
                } else {
                    __this__ = [AMapRoad alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRoadInter": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRoadInter* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRoadInter alloc] init];
                } else {
                    __this__ = [AMapRoadInter alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapStreetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapStreetNumber* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapStreetNumber alloc] init];
                } else {
                    __this__ = [AMapStreetNumber alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapBusinessArea* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapBusinessArea alloc] init];
                } else {
                    __this__ = [AMapBusinessArea alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapAddressComponent* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapAddressComponent alloc] init];
                } else {
                    __this__ = [AMapAddressComponent alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapReGeocode* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapReGeocode alloc] init];
                } else {
                    __this__ = [AMapReGeocode alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapGeocode* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapGeocode alloc] init];
                } else {
                    __this__ = [AMapGeocode alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapBusStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapBusStop* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapBusStop alloc] init];
                } else {
                    __this__ = [AMapBusStop alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapBusLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapBusLine* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapBusLine alloc] init];
                } else {
                    __this__ = [AMapBusLine alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapDistrict": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapDistrict* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapDistrict alloc] init];
                } else {
                    __this__ = [AMapDistrict alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTMC": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTMC* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTMC alloc] init];
                } else {
                    __this__ = [AMapTMC alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapStep* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapStep alloc] init];
                } else {
                    __this__ = [AMapStep alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapPath* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapPath alloc] init];
                } else {
                    __this__ = [AMapPath alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapFutureTimeInfoElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapFutureTimeInfoElement* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapFutureTimeInfoElement alloc] init];
                } else {
                    __this__ = [AMapFutureTimeInfoElement alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapFutureTimeInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapFutureTimeInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapFutureTimeInfo alloc] init];
                } else {
                    __this__ = [AMapFutureTimeInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapWalking": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapWalking* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapWalking alloc] init];
                } else {
                    __this__ = [AMapWalking alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTaxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTaxi* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTaxi alloc] init];
                } else {
                    __this__ = [AMapTaxi alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRailwayStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRailwayStation* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRailwayStation alloc] init];
                } else {
                    __this__ = [AMapRailwayStation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRailwaySpace": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRailwaySpace* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRailwaySpace alloc] init];
                } else {
                    __this__ = [AMapRailwaySpace alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRailway": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRailway* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRailway alloc] init];
                } else {
                    __this__ = [AMapRailway alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSegment": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSegment* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSegment alloc] init];
                } else {
                    __this__ = [AMapSegment alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTransit": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTransit* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTransit alloc] init];
                } else {
                    __this__ = [AMapTransit alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRoute* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRoute alloc] init];
                } else {
                    __this__ = [AMapRoute alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapDistanceResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapDistanceResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapDistanceResult alloc] init];
                } else {
                    __this__ = [AMapDistanceResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocalWeatherLive": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapLocalWeatherLive* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapLocalWeatherLive alloc] init];
                } else {
                    __this__ = [AMapLocalWeatherLive alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocalDayWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapLocalDayWeatherForecast* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapLocalDayWeatherForecast alloc] init];
                } else {
                    __this__ = [AMapLocalDayWeatherForecast alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocalWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapLocalWeatherForecast* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapLocalWeatherForecast alloc] init];
                } else {
                    __this__ = [AMapLocalWeatherForecast alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNearbyUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNearbyUserInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNearbyUserInfo alloc] init];
                } else {
                    __this__ = [AMapNearbyUserInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTrafficEvaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTrafficEvaluation* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTrafficEvaluation alloc] init];
                } else {
                    __this__ = [AMapTrafficEvaluation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTrafficRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTrafficRoad* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTrafficRoad alloc] init];
                } else {
                    __this__ = [AMapTrafficRoad alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapTrafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapTrafficInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapTrafficInfo alloc] init];
                } else {
                    __this__ = [AMapTrafficInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudImage* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudImage alloc] init];
                } else {
                    __this__ = [AMapCloudImage alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapCloudPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapCloudPOI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapCloudPOI alloc] init];
                } else {
                    __this__ = [AMapCloudPOI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSearchError": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSearchError* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSearchError alloc] init];
                } else {
                    __this__ = [AMapSearchError alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNearbyUploadInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNearbyUploadInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNearbyUploadInfo alloc] init];
                } else {
                    __this__ = [AMapNearbyUploadInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNearbySearchManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNearbySearchManager* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNearbySearchManager alloc] init];
                } else {
                    __this__ = [AMapNearbySearchManager alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapSearchAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapSearchAPI* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapSearchAPI alloc] init];
                } else {
                    __this__ = [AMapSearchAPI alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"AMapNearbySearchManagerDelegate::createAnonymous__": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            id<AMapNearbySearchManagerDelegate> __result__ = [[AMapNearbySearchManagerDelegate_Anonymous alloc] initWithFlutterPluginRegistrar:registrar];
            methodResult(__result__);
        },
        @"AMapSearchDelegate::createAnonymous__": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            id<AMapSearchDelegate> __result__ = [[AMapSearchDelegate_Anonymous alloc] initWithFlutterPluginRegistrar:registrar];
            methodResult(__result__);
        },
        @"AMapEmptyStringIfNil::AMapEmptyStringIfNil": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapEmptyStringIfNil::AMapEmptyStringIfNil(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* s = (NSString*) args[@"s"];
        
            // ref
        
        
            // invoke native method
            NSString* result = AMapEmptyStringIfNil(s);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"AMapCoordinateConvert::AMapCoordinateConvert": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapCoordinateConvert::AMapCoordinateConvert(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
            // enum arg
            AMapCoordinateType type = (AMapCoordinateType) [args[@"type"] integerValue];
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = AMapCoordinateConvert(coordinate, type);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = AMapDataAvailableForCoordinate(coordinate);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
    };
}

@end
