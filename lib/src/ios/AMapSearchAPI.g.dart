// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapSearchAPI extends NSObject  {
  //region constants
  static const String name__ = 'AMapSearchAPI';

  @override
  final String tag__ = 'amap_search_fluttify';

  
  //endregion

  //region creators
  static Future<AMapSearchAPI> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod(
      'ObjectFactory::createAMapSearchAPI',
      {'init': init}
    );
    return AmapSearchFluttifyIOSAs<AMapSearchAPI>(__result__)!;
  }
  
  static Future<List<AMapSearchAPI>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapSearchFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchAMapSearchAPI',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapSearchFluttifyIOSAs<AMapSearchAPI>(it))
        .where((element) => element !=null)
        .cast<AMapSearchAPI>()
        .toList() ?? <AMapSearchAPI>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(AMapSearchDelegate delegate) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapSearchAPI::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('AMapSearchDelegate::Callback', kAmapSearchFluttifyMethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::AMapSearchDelegate::AMapSearchRequest_didFailWithError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: AMapSearchRequest_didFailWithError([\'request\':${args['request']}, \'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate.AMapSearchRequest_didFailWithError(AmapSearchFluttifyIOSAs<dynamic>(args['request']), AmapSearchFluttifyIOSAs<NSError>(args['error']));
              break;
            case 'Callback::AMapSearchDelegate::onPOISearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onPOISearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onPOISearchDone_response(AmapSearchFluttifyIOSAs<AMapPOISearchBaseRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapPOISearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onRoutePOISearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onRoutePOISearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onRoutePOISearchDone_response(AmapSearchFluttifyIOSAs<AMapRoutePOISearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapRoutePOISearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onGeocodeSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onGeocodeSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onGeocodeSearchDone_response(AmapSearchFluttifyIOSAs<AMapGeocodeSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapGeocodeSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onReGeocodeSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onReGeocodeSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onReGeocodeSearchDone_response(AmapSearchFluttifyIOSAs<AMapReGeocodeSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapReGeocodeSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onInputTipsSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onInputTipsSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onInputTipsSearchDone_response(AmapSearchFluttifyIOSAs<AMapInputTipsSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapInputTipsSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onBusStopSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onBusStopSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onBusStopSearchDone_response(AmapSearchFluttifyIOSAs<AMapBusStopSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapBusStopSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onBusLineSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onBusLineSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onBusLineSearchDone_response(AmapSearchFluttifyIOSAs<AMapBusLineBaseSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapBusLineSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onDistrictSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onDistrictSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onDistrictSearchDone_response(AmapSearchFluttifyIOSAs<AMapDistrictSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapDistrictSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onRouteSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onRouteSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onRouteSearchDone_response(AmapSearchFluttifyIOSAs<AMapRouteSearchBaseRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapRouteSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onFutureRouteSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFutureRouteSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onFutureRouteSearchDone_response(AmapSearchFluttifyIOSAs<AMapRouteSearchBaseRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapFutureRouteSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onDistanceSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onDistanceSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onDistanceSearchDone_response(AmapSearchFluttifyIOSAs<AMapDistanceSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapDistanceSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onWeatherSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onWeatherSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onWeatherSearchDone_response(AmapSearchFluttifyIOSAs<AMapWeatherSearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapWeatherSearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onNearbySearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onNearbySearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onNearbySearchDone_response(AmapSearchFluttifyIOSAs<AMapNearbySearchRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapNearbySearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onCloudSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCloudSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onCloudSearchDone_response(AmapSearchFluttifyIOSAs<AMapCloudSearchBaseRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapCloudPOISearchResponse>(args['response']));
              break;
            case 'Callback::AMapSearchDelegate::onShareSearchDone_response':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onShareSearchDone_response([\'request\':${args['request']}, \'response\':${args['response']}])');
              }
          
              // handle the native call
              delegate.onShareSearchDone_response(AmapSearchFluttifyIOSAs<AMapShareSearchBaseRequest>(args['request']), AmapSearchFluttifyIOSAs<AMapShareSearchResponse>(args['response']));
              break;
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e.toString());
          rethrow;
        }
      });
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'AMapSearchAPI{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapSearchAPI_Batch on List<AMapSearchAPI> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}